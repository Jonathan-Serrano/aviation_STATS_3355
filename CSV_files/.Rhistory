# Get Pearson correlation between variables ram and battery power
cor(mobile_data$battery_power, mobile_data$ram, method = "pearson")
# Make 4 data sets based on the 4 price ranges
priceLow <- mobile_data[mobile_data$price_range == "low", c(1:21)]
priceMedium = mobile_data[mobile_data$price_range == "medium", c(1:21)]
priceHigh = mobile_data[mobile_data$price_range == "high", c(1:21)]
priceVeryhigh = mobile_data[mobile_data$price_range == "very_high", c(1:21)]
cor(priceLow$battery_power, priceLow$ram, method = "pearson")
cor(priceMedium$battery_power, priceMedium$ram, method = "pearson")
cor(priceHigh$battery_power, priceHigh$ram, method = "pearson")
cor(priceVeryhigh$battery_power, priceVeryhigh$ram, method = "pearson")
plot(ram ~ battery_power, data = mobile_data, pch = 16,
ylab = "Battery Power", xlab = "RAM", main = "Battery Power v. RAM",
col = mobile_data$price_range)
abline(lm(ram ~ battery_power, data = priceLow), col = 1)
abline(lm(ram ~ battery_power, data = priceMedium), col = 1)
abline(lm(ram ~ battery_power, data = priceHigh), col = 1)
abline(lm(ram ~ battery_power, data = priceVeryhigh), col = 1)
plot(mobile_data$ram, mobile_data$battery_power, pch = 16,
ylab = "Battery Power", xlab = "RAM", main = "Battery Power v. RAM",
col = mobile_data$price_range)
abline(lm(battery_power ~ ram, data = priceLow), col = 1)
abline(lm(battery_power ~ ram, data = priceMedium), col = 1)
abline(lm(battery_power ~ ram, data = priceHigh), col = 1)
abline(lm(battery_power ~ ram, data = priceVeryhigh), col = 1)
# mean and median clock speeds for 4,6 and 8 cores
round(mean(mobile_data$clock_speed[mobile_data$n_cores == 4]), digits = 2)
round(median(mobile_data$clock_speed[mobile_data$n_cores == 4]), digits = 2)
round(mean(mobile_data$clock_speed[mobile_data$n_cores == 6]), digits = 2)
round(median(mobile_data$clock_speed[mobile_data$n_cores == 6 ]), digits = 2)
round(mean(mobile_data$clock_speed[mobile_data$n_cores == 8]), digits = 2)
round(median(mobile_data$clock_speed[mobile_data$n_cores == 8]), digits = 2)
# mean and median clock speeds for 4,6 and 8 cores
round(mean(mobile_data$clock_speed[mobile_data$n_cores == 4 | mobile_data$n_cores == 6 | mobile_data$n_cores == 8]), digits = 2)
round(median(mobile_data$clock_speed[mobile_data$n_cores == 4 | mobile_data$n_cores == 6 | mobile_data$n_cores == 8]), digits = 2)
options(scipen = 9) # Get rid of scientific notation
# All density plots
plot(density(priceLow$ram), main = "Density plot of ram ", col = "blue" , xlim = c(0,4500))
lines(density(priceHigh$ram), col = "red")
lines(density(priceVeryhigh$ram), col = "green")
lines(density(priceMedium$ram), col = "black")
legend(x = "top",
legend = levels(as.factor(mobile_data$price_range)),
pch = (1:4)/6,
col = mobile_data$price_range,
bty = "n",
cex = 0.5)
options(scipen = 9) # Get rid of scientific notation
# All density plots
plot(density(priceLow$ram), main = "Density plot of ram ", col = "blue" , xlim = c(0,4500))
lines(density(priceHigh$ram), col = "red")
lines(density(priceVeryhigh$ram), col = "green")
lines(density(priceMedium$ram), col = "black")
legend(x = "top",
legend = levels(as.factor(mobile_data$price_range)),
pch = (1:4)/6,
col = c("red","blue","green","black"),
bty = "n",
cex = 0.5)
options(scipen = 9) # Get rid of scientific notation
# All density plots
plot(density(priceLow$ram), main = "Density plot of ram ", col = "blue" , xlim = c(0,4500))
lines(density(priceHigh$ram), col = "red")
lines(density(priceVeryhigh$ram), col = "green")
lines(density(priceMedium$ram), col = "black")
legend(x = "top",
legend = levels(as.factor(mobile_data$price_range)),
pch = (1:4)/6,
col = c("blue","black","red","green"),
bty = "n",
cex = 0.5)
boxplot(priceLow$ram)
boxplot(priceLow$ram)
boxplot(priceMedium$ram)
boxplot(priceLow$ram)
lines(priceMedium$ram)
boxplot(price_range ~ ram, data = mobile_data)
boxplot(ram~ price_range, data = mobile_data)
boxplot(ram ~ price_range, data = mobile_data,
main="Different boxplots for different Prices",
xlab="Price Ranges",
ylab=" numeric Dose in milligrams/day",)
boxplot(ram ~ price_range, data = mobile_data,
main="Different boxplots for different Prices",
xlab="Price Ranges",
ylab=" numeric Dose in milligrams/day")
boxplot(ram ~ price_range, data = mobile_data,
main="Different boxplots for different Prices",
xlab="Price Ranges",
ylab="Ram")
boxplot(ram ~ price_range, data = mobile_data,
main="Different boxplots for different Prices",
xlab="Price Ranges",
ylab="Ram (Mb)"
boxplot(ram ~ price_range, data = mobile_data,
main="Different boxplots for different Prices",
xlab="Price Ranges",
ylab="Ram (Mb)")
# Bloxplots for ram
violinplot(priceLow$ram)
# Bloxplots for ram
vioplot(priceLow$ram)
install.packages(vioplot)
install.package(vioplot)
install.packages("vioplot")
# Bloxplots for ram
vioplot(priceLow$ram)
install.packages("vioplot")
# Bloxplots for ram
vioplot(priceLow$ram)
vioplot(priceLow$ram)
install.packages("vioplot")
library(vioplot)
# Bloxplots for ram
vioplot(priceLow$ram)
install.packages("vioplot")
library(vioplot)
# Violin Plots for ram
vioplot(priceLow$ram,priceMedium$ram )
install.packages("vioplot")
knitr::opts_chunk$set(echo = TRUE)
install.packages("vioplot")
library(vioplot)
# Violin Plots for ram
vioplot(priceLow$ram,priceMedium$ram, priceHigh$ram, priceVeryhigh$ram)
install.packages("vioplot")
library(vioplot)
# Violin Plots for ram
vioplot(priceLow$ram,priceMedium$ram, priceHigh$ram, priceVeryhigh$ram,
xlab = "hi")
install.packages("vioplot")
knitr::opts_chunk$set(echo = TRUE)
install.packages("vioplot")
library(vioplot)
# Violin Plots for ram
vioplot(priceLow$ram,priceMedium$ram, priceHigh$ram, priceVeryhigh$ram,
ylim = c(0,4500),
xlab = "hi")
install.packages("vioplot")
library(vioplot)
# Violin Plots for ram
vioplot(priceLow$ram,
ylim = c(0,4500),
xlab = "hi")
install.packages("vioplot")
knitr::opts_chunk$set(echo = TRUE)
install.packages("vioplot")
library(vioplot)
# Violin Plots for ram
vioplot(priceLow$ram,
xlab = "hi")
install.packages("vioplot")
library(vioplot)
# Violin Plots for ram
vioplot(priceLow$ram, priceMedium$ram, priceHigh$ram, priceVeryhigh$ram,
xlab = "hi")
install.packages("vioplot")
?vioplot
??vioplot
knitr::opts_chunk$set(echo = TRUE)
install.packages("vioplot")
library(vioplot)
# Violin Plots for ram
vioplot(priceLow$ram, priceMedium$ram, priceHigh$ram, priceVeryhigh$ram,
xlab = "hi",
names = c("low","medium","high","very_high"))
# Box plots for ram
boxplot(ram ~ price_range, data = mobile_data,
main="Different boxplots for different Prices",
xlab="Price Ranges",
ylab="Ram (Mb)"),
# Box plots for ram
boxplot(ram ~ price_range, data = mobile_data,
main="Different boxplots for different Prices",
xlab="Price Ranges",
ylab="Ram (Mb)",
names = c("Low","Medium","High","Very High"))
install.packages("vioplot")
library(vioplot)
# Violin Plots for ram
vioplot(priceLow$ram, priceMedium$ram, priceHigh$ram, priceVeryhigh$ram,
xlab = "hi",
names = c("Low","Medium","High","Very High"))
install.packages("vioplot")
knitr::opts_chunk$set(echo = TRUE)
install.packages("vioplot")
library(vioplot)
# Violin Plots for ram
vioplot(priceLow$ram, priceMedium$ram, priceHigh$ram, priceVeryhigh$ram,
xlab = "Prices",
names = c("Low","Medium","High","Very High"))
knitr::opts_chunk$set(echo = TRUE)
mobile_data <- read.csv("train.csv") # Read in CSV into DataFrame
# Turn price range into factor variables
mobile_data$price_range <- factor(mobile_data$price_range,
levels = c(0,1,2,3),
labels = c("low","medium","high","very_high"))
plot(mobile_data$ram, mobile_data$battery_power, pch = 16,
ylab = "Battery Power", xlab = "RAM", main = "Battery Power v. RAM",
col = mobile_data$price_range)
# Get Pearson correlation between variables ram and battery power
cor(mobile_data$battery_power, mobile_data$ram, method = "pearson")
# Make 4 data sets based on the 4 price ranges
priceLow <- mobile_data[mobile_data$price_range == "low", c(1:21)]
priceMedium = mobile_data[mobile_data$price_range == "medium", c(1:21)]
priceHigh = mobile_data[mobile_data$price_range == "high", c(1:21)]
priceVeryhigh = mobile_data[mobile_data$price_range == "very_high", c(1:21)]
cor(priceLow$battery_power, priceLow$ram, method = "pearson")
cor(priceMedium$battery_power, priceMedium$ram, method = "pearson")
cor(priceHigh$battery_power, priceHigh$ram, method = "pearson")
cor(priceVeryhigh$battery_power, priceVeryhigh$ram, method = "pearson")
plot(ram ~ battery_power, data = mobile_data, pch = 16,
ylab = "Battery Power", xlab = "RAM", main = "Battery Power v. RAM",
col = mobile_data$price_range)
abline(lm(ram ~ battery_power, data = priceLow), col = 1)
abline(lm(ram ~ battery_power, data = priceMedium), col = 1)
abline(lm(ram ~ battery_power, data = priceHigh), col = 1)
abline(lm(ram ~ battery_power, data = priceVeryhigh), col = 1)
plot(mobile_data$ram, mobile_data$battery_power, pch = 16,
ylab = "Battery Power", xlab = "RAM", main = "Battery Power v. RAM",
col = mobile_data$price_range)
abline(lm(battery_power ~ ram, data = priceLow), col = 1)
abline(lm(battery_power ~ ram, data = priceMedium), col = 1)
abline(lm(battery_power ~ ram, data = priceHigh), col = 1)
abline(lm(battery_power ~ ram, data = priceVeryhigh), col = 1)
# mean and median clock speeds for 4,6 and 8 cores
round(mean(mobile_data$clock_speed[mobile_data$n_cores == 4 | mobile_data$n_cores == 6 | mobile_data$n_cores == 8]), digits = 2)
round(median(mobile_data$clock_speed[mobile_data$n_cores == 4 | mobile_data$n_cores == 6 | mobile_data$n_cores == 8]), digits = 2)
options(scipen = 9) # Get rid of scientific notation
# All density plots
plot(density(priceLow$ram), main = "Density plot of ram ", col = "blue" , xlim = c(0,4500))
lines(density(priceHigh$ram), col = "red")
lines(density(priceVeryhigh$ram), col = "green")
lines(density(priceMedium$ram), col = "black")
legend(x = "top",
legend = levels(as.factor(mobile_data$price_range)),
pch = (1:4)/6,
col = c("blue","black","red","green"),
bty = "n",
cex = 0.5)
# Box plots for ram
boxplot(ram ~ price_range, data = mobile_data,
main="Different boxplots for different Prices",
xlab="Price Ranges",
ylab="Ram (Mb)",
names = c("Low","Medium","High","Very High"))
install.packages("vioplot")
library(vioplot)
# Violin Plots for ram
vioplot(priceLow$ram, priceMedium$ram, priceHigh$ram, priceVeryhigh$ram,
xlab = "Prices",
ylab = "RAM"
names = c("Low","Medium","High","Very High"))
install.packages("vioplot")
install.packages("vioplot")
library(vioplot)
# Violin Plots for ram
vioplot(priceLow$ram, priceMedium$ram, priceHigh$ram, priceVeryhigh$ram,
xlab = "Prices",
ylab = "RAM",
names = c("Low","Medium","High","Very High"))
knitr::opts_chunk$set(echo = TRUE)
# Box plots for ram
boxplot(ram ~ price_range, data = mobile_data,
main="Different boxplots for different Prices",
xlab="Price Ranges",
ylab="RAM (Mb)",
names = c("Low","Medium","High","Very High"))
mobile_data["log2_ram"] <- round(log2(mobile_data$ram), digits = 0)
mobile_data["log2_ram"] <- factor(round(log2(mobile_data$ram), digits = 0))
# install Vioplots
install.packages("vioplot")
library(vioplot)
# Violin Plots for ram
vioplot(priceLow$ram, priceMedium$ram, priceHigh$ram, priceVeryhigh$ram,
xlab = "Prices",
ylab = "RAM",
names = c("Low","Medium","High","Very High"))
install.packages("vioplot")
knitr::opts_chunk$set(echo = TRUE)
# install Vioplots
library(vioplot)
# Violin Plots for ram
vioplot(priceLow$ram, priceMedium$ram, priceHigh$ram, priceVeryhigh$ram,
xlab = "Prices",
ylab = "RAM",
names = c("Low","Medium","High","Very High"))
# Make factor of log 2
mobile_data["log2_ram"] <- factor(round(log2(mobile_data$ram), digits = 0))
# Make factor of log 2
mobile_data["log2_ram"] <- factor(round(log2(mobile_data$ram), digits = 0))
# Make factor of log 2
mobile_data["log2_ram"] <- factor(round(log2(mobile_data$ram), digits = 0))
priceLow["log2_ram"] <- mobile_data[mobile_data$log2_ram == "low", c(1:21)]
# Make factor of log 2
mobile_data["log2_ram"] <- factor(round(log2(mobile_data$ram), digits = 0))
priceLow["log2_ram"] <- mobile_data[mobile_data$log2_ram == "low"]
View(priceLow)
# Make factor of log 2
mobile_data["log2_ram"] <- factor(round(log2(mobile_data$ram), digits = 0))
priceLow["log2_ram"] <- mobile_data[mobile_data$log2_ram == "low"]
# Make factor of log 2
mobile_data["log2_ram"] <- factor(round(log2(mobile_data$ram), digits = 0))
priceLow["log2_ram"] <- mobile_data[mobile_data$log2_ram == "low"]
# Make factor of log 2
mobile_data["log2_ram"] <- factor(round(log2(mobile_data$ram), digits = 0))
priceLow["log2_ram"] <- mobile_data[mobile_data$log2_ram == "low"]
# Make factor of log 2
mobile_data["log2_ram"] <- factor(round(log2(mobile_data$ram), digits = 0))
priceLow["log2_ram"] <- mobile_data[mobile_data$log2_ram == "low"]
# Make factor of log 2
mobile_data["log2_ram"] <- factor(round(log2(mobile_data$ram), digits = 0))
priceLow["log2_ram"] <- mobile_data[mobile_data$log2_ram == "low"]
# Make factor of log 2
mobile_data["log2_ram"] <- factor(round(log2(mobile_data$ram), digits = 0))
priceLow["log2_ram"] <- mobile_data$log2_ram[mobile_data$log2_ram == "low"]
# Make factor of log 2
mobile_data["log2_ram"] <- factor(round(log2(mobile_data$ram), digits = 0))
priceLow["log2_ram"] <- mobile_data$log2_ram[mobile_data$log2_ram == "low"]
# Make factor of log 2
mobile_data["log2_ram"] <- factor(round(log2(mobile_data$ram), digits = 0))
priceLow["log2_ram"] <- mobile_data$log2_ram[mobile_data$price_range == "low"]
# Make factor of log 2
mobile_data["log2_ram"] <- factor(round(log2(mobile_data$ram), digits = 0))
priceLow["log2_ram"] <- mobile_data$log2_ram[mobile_data$price_range == "low"]
priceMedium["log2_ram"] <- mobile_data$log2_ram[mobile_data$price_range == "medium"]
priceHigh["log2_ram"] <- mobile_data$log2_ram[mobile_data$price_range == "high"]
priceVeryhigh["log2_ram"] <- mobile_data$log2_ram[mobile_data$price_range == "very_high"]
View(priceMedium)
View(priceHigh)
View(priceVeryhigh)
barplot(as.matrix(priceLow),col=c("gold3","red"))
barplot(as.matrix(priceLow$log2_ram),col=c("gold3","red"))
# mean and median clock speeds for 4,6 and 8 cores
round(mean(mobile_data$clock_speed[mobile_data$n_cores == 4]), digits = 2)
round(median(mobile_data$clock_speed[mobile_data$n_cores == 4]), digits = 2)
round(mean(mobile_data$clock_speed[mobile_data$n_cores == 6 ]), digits = 2)
round(median(mobile_data$clock_speed[mobile_data$n_cores == 6]), digits = 2)
round(mean(mobile_data$clock_speed[mobile_data$n_cores == 8]), digits = 2)
round(median(mobile_data$clock_speed[mobile_data$n_cores == 8]), digits = 2)
plot battery_power ~ ram, data = mobile_data, pch = 16,
plot(battery_power ~ ram, data = mobile_data, pch = 16,
ylab = "Battery Power", xlab = "RAM", main = "Battery Power v. RAM",
col = mobile_data$price_range)
abline(lm(ram ~ battery_power, data = priceLow), col = 1)
abline(lm(ram ~ battery_power, data = priceMedium), col = 1)
abline(lm(ram ~ battery_power, data = priceHigh), col = 1)
abline(lm(ram ~ battery_power, data = priceVeryhigh), col = 1)
plot(battery_power ~ ram, data = mobile_data, pch = 16,
ylab = "Battery Power", xlab = "RAM", main = "Battery Power v. RAM",
col = mobile_data$price_range)
abline(lm(battery_power ~ ram, data = priceLow), col = 1)
abline(lm(battery_power ~ ram, data = priceMedium), col = 1)
abline(lm(battery_power ~ ram, data = priceHigh), col = 1)
abline(lm(battery_power ~ ram, data = priceVeryhigh), col = 1)
legend(x = "topright",
legend = levels(as.factor(mpg$cyl)),
pch = (1:4)/5,
col = 1,
bty = "n")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ , y = hwy)) +
labs(x = "Number of cylinders ", y = "Highway MPG", title = "Relationship between MPG and cylinder numbers")
library(ggplot2)
data("mpg")
# Q1
ct <- xtabs(~ class + drv, data = mpg)
barplot(ct, col = c("red", "green", "blue"),
legend.text = c("4wd", "fwd", "rwd"),
args.legend = list(x = "lopleft", bty = "n"),
main = "Title",
ylab = "frequency")
# Q2
boxplot(hwy ~ drv, data = mpg,
subset = (drv != "r") & (class == "compact"),
mnaim = "TBA",
names =c("4WD", "FWD"),
xlab = "",
ylab = "Highway MPG",
labs = 1)
# Q3
plot(hwy ~ displ, data = mpg,
main = "TBA",
xlab = "Displacement (L)",
ylab = "HWY MPG",
pch = 16)
abline(lm(hwy ~ displ, data = mpg), col = 2)
plot(hwy ~ displ, data = mpg, cex = as.numeric(as.factor(cyl))/5)
library(ggplot2)
data("mpg")
# Q1
ct <- xtabs(~ class + drv, data = mpg)
barplot(ct, col = c("red", "green", "blue"),
legend.text = c("4wd", "fwd", "rwd"),
args.legend = list(x = "lopleft", bty = "n"),
main = "Title",
ylab = "frequency")
?mpg
ct <- xtabs(~ ram + price_range, data = mobile_data)
barplot(ct, col = c("red", "green", "blue"),
legend.text = c("4wd", "fwd", "rwd"),
args.legend = list(x = "lopleft", bty = "n"),
main = "Title",
ylab = "frequency")
ct <- xtabs(~ ram + price_range, data = mobile_data)
barplot(ct, col = c("red", "green", "blue"),
legend.text = c("4wd", "fwd", "rwd"),
args.legend = "lopleft",
main = "Title",
ylab = "frequency")
ct <- xtabs(~ price_range + ram , data = mobile_data)
barplot(ct, col = c("red", "green", "blue"),
legend.text = c("4wd", "fwd", "rwd"),
args.legend = "lopleft",
main = "Title",
ylab = "frequency")
ct <- xtabs(~ ram + price_range, data = mobile_data)
barplot(ct, col = c("red", "green", "blue"),
legend.text = c("4wd", "fwd", "rwd"),
args.legend = "lopleft",
main = "Title",
ylab = "frequency")
ct <- xtabs(price_range~ ram, data = mobile_data)
ct <- xtabs(price_range ~ ram, data = mobile_data)
ct <- xtabs(price_range ~ ram, na.rm = TRUE, data = mobile_data)
data(mpg)
library(ggplot2)
data(mpg)
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = cty)) +
facet_grid(cyl ~ drv)
ggplot(data = mpg) +
facet_grid(drv ~.)
facet_wrap(.~ drv, sclaes = free)
geom_point(mapping = aes(x = displ, y = hwy, color = drv) +
ggplot(data = mpg) +
facet_grid(.~ drv, sclaes = free)
ggplot(data = mpg) +
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = drv)) +
facet_grid(.~ drv, scales = free)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = drv)) +
facet_grid(.~ drv, scales = free)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = drv)) +
facet_grid(.~ drv, scales = "free")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "red"))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = 0))
# IF you want color not based on data, use color outside of aes
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), se = FALSE)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), se = FALSE)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), se = FALSE)
ggplot(data = mpg) +
smooth(mapping = aes(x = displ, y = hwy), se = FALSE)
ggplot(data = mpg) +
smooth(mapping = aes(x = displ, y = hwy), se = FALSE)
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy), se = FALSE)
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy),
se = FALSE,
color = "red",
method = "lm")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = drv)) +
geom_smooth(mapping = aes(x = displ, y = hwy),
se = FALSE,
color = "red",
method = "lm")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy),
se = FALSE,
color = "red",
method = "lm")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy),
se = FALSE,
color = "red")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy),
se = FALSE,
color = "red",
method = "lm")
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy),
se = FALSE,
color = "red",
method = "lm") +
geom_point()
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy), linetype = 6),
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy), linetype = 6)
print("hello world")
print("hi ")
setwd("~/Desktop/aviation_STATS_3355/CSV_files")
July.2018 <- read.csv("3355 project 2018 July.csv")
View(July.2018)
